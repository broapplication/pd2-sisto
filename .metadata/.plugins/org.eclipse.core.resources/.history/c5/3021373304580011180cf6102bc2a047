package it.polito.pd2.WF.sol6.service;

import java.util.List;
import java.util.logging.Logger;

import it.polito.pd2.WF.sol6.service.WorkflowUtilities.Errors;
import it.polito.pd2.WF.sol6.service.WorkflowUtilities.Messages;
import it.polito.pd2.WF.sol6.service.gen.ActionFault;
import it.polito.pd2.WF.sol6.service.gen.ActorFault;
import it.polito.pd2.WF.sol6.service.gen.ActorType;
import it.polito.pd2.WF.sol6.service.gen.DifferentRole_Exception;
import it.polito.pd2.WF.sol6.service.gen.GenericFault_Exception;
import it.polito.pd2.WF.sol6.service.gen.ProcessPortType;
import it.polito.pd2.WF.sol6.service.gen.UnknownCode;
import it.polito.pd2.WF.sol6.service.gen.UnknownCodes_Exception;
import it.polito.pd2.WF.sol6.service.gen.UnknownName;
import it.polito.pd2.WF.sol6.service.gen.UnknownNames_Exception;

import javax.jws.WebService;

@WebService(
		name="ProcessPortType", 
		endpointInterface="it.polito.pd2.WF.sol6.service.gen.ProcessPortType", 
		wsdlLocation="META-INF/WorkflowService.wsdl", 
		targetNamespace="http://pad.polito.it/Workflow", 
		serviceName="ProcessService", portName="ProcessPort")
public class ProcessServiceImpl implements ProcessPortType{

	private WorkflowServer server;
	private static Logger logger = Logger.getLogger(WorkflowInfoServiceImpl.class.getName());
	
	public ProcessServiceImpl() {
		server=WorkflowServer.getInstance();
	}
	
	@Override
	public void takeInCharge(String clientID, int requestID, String pCode,
			String aCode, ActorType actor) throws ActionFault, ActorFault,
			DifferentRole_Exception, GenericFault_Exception, UnknownCode {
		if(clientID==null)
			throw new GenericFault_Exception(
					Messages.REQUEST_NOT_WELL_FORMED, 
					Errors.REQUEST_NOT_WELL_FORMED);
		try {
			server.serveRequest(clientID, requestID);
			if(!server.getProcesses().containsKey(pCode))
				throw new UnknownCode(
						Messages.UNKNOWN_CODE, 
						Errors.UNKNOWN_CODE);

		} catch (WorkflowServerException e) {
			logger.warning(e.getMessage());
			throw new GenericFault_Exception(
					Messages.SERVICE_UNAVAILABLE,
					Errors.SERVICE_UNAVAILABLE,
					e);
		}
		
	}
	
	@Override
	public String takeClientID() throws GenericFault_Exception {
		try {
			return server.takeClientID();
		} catch (WorkflowServerException e) {
			logger.warning(Messages.SERVER_NOT_READY);
			throw new GenericFault_Exception(
					Messages.SERVICE_UNAVAILABLE,
					Errors.SERVICE_UNAVAILABLE,
					e);
		}
	}

	
	@Override
	public void terminateAction(String clientID, int requestID, String pCode,
			String aCode, List<String> nextAction) throws ActionFault,
			GenericFault_Exception, UnknownCodes_Exception,
			UnknownNames_Exception {
		if(clientID==null)
			throw new GenericFault_Exception(
					Messages.REQUEST_NOT_WELL_FORMED, 
					Errors.REQUEST_NOT_WELL_FORMED);
		
		// TODO Auto-generated method stub
		try {
			server.serveRequest(clientID, requestID);

		} catch (WorkflowServerException e) {
			logger.warning(e.getMessage());
			throw new GenericFault_Exception(
					Messages.SERVICE_UNAVAILABLE,
					Errors.SERVICE_UNAVAILABLE,
					e);
		}

		
	}
}
