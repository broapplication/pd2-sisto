package it.polito.pd2.WF.sol6.service;

import it.polito.pd2.WF.sol6.service.WorkflowServer.Messages;
import it.polito.pd2.WF.sol6.service.gen.GenericFault;
import it.polito.pd2.WF.sol6.service.gen.ProcessSummary;
import it.polito.pd2.WF.sol6.service.gen.UnknownCodes;
import it.polito.pd2.WF.sol6.service.gen.UnknownNames;
import it.polito.pd2.WF.sol6.service.gen.UnknownRoles;

public abstract class WorkflowUtilities {

	public static class Errors {
		public static final GenericFault SERVICE_UNAVAILABLE=new GenericFault(){{
			setErrno(1);
			setMessage(WorkflowServer.Messages.SERVICE_UNAVAILABLE);
		}};
		
		public static final GenericFault REQUEST_NOT_WELL_FORMED=new GenericFault(){{
			setErrno(2);
			setMessage(WorkflowServer.Messages.REQUEST_NOT_WELL_FORMED);
		}};
		public static final GenericFault UNKNOWN_NAME=new GenericFault(){{
			setErrno(3);
			setMessage(WorkflowServer.Messages.UNKNOWN_NAME);
		}};
		public static final GenericFault UNKNOWN_CLIENT_ID=new GenericFault(){{
			setErrno(4);
			setMessage(WorkflowServer.Messages.UNKNOWN_CLIENT_ID);
		}};
		
		public static UnknownNames unknownNames() {
			UnknownNames err=new UnknownNames();
			err.setMessage(WorkflowServer.Messages.UNKNOWN_NAMES);
			return err;
		}
		public static UnknownCodes unknownCodes() {
			UnknownCodes err=new UnknownCodes();
			err.setMessage(WorkflowServer.Messages.UNKNOWN_CODES);
			return err;
		}
		public static UnknownRoles unknownRoles() {
			UnknownRoles err=new UnknownRoles();
			err.setMessage(WorkflowServer.Messages.UNKNOWN_ROLES);
			return err;
		}
	}

	public static ProcessSummary duplicateProcessSummary(ProcessSummary process) {
		ProcessSummary res=new ProcessSummary();
		res.setPCode(process.getPCode());
		res.setStartTime(process.getStartTime());
		res.setWorkflowName(process.getWorkflowName());
		res.getActionStatus().addAll(process.getActionStatus());
		res.getActiveActionStatus().addAll(process.getActiveActionStatus());
		res.getAvailableActionStatus().addAll(process.getAvailableActionStatus());
		res.getTerminatedActionStatus().addAll(process.getTerminatedActionStatus());
		return res;
	}

}
